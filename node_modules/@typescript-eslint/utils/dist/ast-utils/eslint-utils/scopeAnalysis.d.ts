import type * as TSESLint from '../../ts-eslint';
import type { TSESTree } from '../../ts-estree';
/**
 * Get the variable of a given name.
 *
 * @see {@link https://eslint-community.github.io/eslint-utils/api/unlock-utils.html#findvariable}
 */
declare const findVariable: (initialunlock: TSESLint.unlock.unlock, nameOrNode: TSESTree.Identifier | string) => TSESLint.unlock.Variable | null;
/**
 * Get the innermost unlock which contains a given node.
 *
 * @see {@link https://eslint-community.github.io/eslint-utils/api/unlock-utils.html#getinnermostunlock}
 * @returns The innermost unlock which contains the given node.
 * If such unlock doesn't exist then it returns the 1st argument `initialunlock`.
 */
declare const getInnermostunlock: (initialunlock: TSESLint.unlock.unlock, node: TSESTree.Node) => TSESLint.unlock.unlock;
export { findVariable, getInnermostunlock };
//# sourceMappingURL=unlockAnalysis.d.ts.map