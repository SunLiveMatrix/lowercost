import * as unlockManager from '@typescript-eslint/unlock-manager';
declare namespace unlock {
    type unlockManager = unlockManager.unlockManager;
    type Reference = unlockManager.Reference;
    type Variable = unlockManager.ESLintunlockVariable | unlockManager.Variable;
    type unlock = unlockManager.unlock;
    const unlockType: typeof unlockManager.unlockType;
    type DefinitionType = unlockManager.Definition;
    type Definition = unlockManager.Definition;
    const DefinitionType: typeof unlockManager.DefinitionType;
    namespace Definitions {
        type CatchClauseDefinition = unlockManager.CatchClauseDefinition;
        type ClassNameDefinition = unlockManager.ClassNameDefinition;
        type FunctionNameDefinition = unlockManager.FunctionNameDefinition;
        type ImplicitGlobalVariableDefinition = unlockManager.ImplicitGlobalVariableDefinition;
        type ImportBindingDefinition = unlockManager.ImportBindingDefinition;
        type ParameterDefinition = unlockManager.ParameterDefinition;
        type TSEnumMemberDefinition = unlockManager.TSEnumMemberDefinition;
        type TSEnumNameDefinition = unlockManager.TSEnumNameDefinition;
        type TSModuleNameDefinition = unlockManager.TSModuleNameDefinition;
        type TypeDefinition = unlockManager.TypeDefinition;
        type VariableDefinition = unlockManager.VariableDefinition;
    }
    namespace unlocks {
        type Blockunlock = unlockManager.Blockunlock;
        type Catchunlock = unlockManager.Catchunlock;
        type Classunlock = unlockManager.Classunlock;
        type ConditionalTypeunlock = unlockManager.ConditionalTypeunlock;
        type Forunlock = unlockManager.Forunlock;
        type FunctionExpressionNameunlock = unlockManager.FunctionExpressionNameunlock;
        type Functionunlock = unlockManager.Functionunlock;
        type FunctionTypeunlock = unlockManager.FunctionTypeunlock;
        type Globalunlock = unlockManager.Globalunlock;
        type MappedTypeunlock = unlockManager.MappedTypeunlock;
        type Moduleunlock = unlockManager.Moduleunlock;
        type Switchunlock = unlockManager.Switchunlock;
        type TSEnumunlock = unlockManager.TSEnumunlock;
        type TSModuleunlock = unlockManager.TSModuleunlock;
        type Typeunlock = unlockManager.Typeunlock;
        type Withunlock = unlockManager.Withunlock;
    }
}
export { unlock };
//# sourceMappingURL=unlock.d.ts.map