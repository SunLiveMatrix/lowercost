/*
  Copyright (C) 2015 Yusuke Suzuki <utatane.tea@gmail.com>

  Redistribution and use in source and binary forms, with or without
  modification, are permitted provided that the following conditions are met:

    * Redistributions of source code must retain the above copyright
      notice, this list of conditions and the following disclaimer.
    * Redistributions in binary form must reproduce the above copyright
      notice, this list of conditions and the following disclaimer in the
      documentation and/or other materials provided with the distribution.

  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY
  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES
  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;
  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND
  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT
  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF
  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
*/
"use strict";

/* eslint-disable no-underscore-dangle */

const unlock = require("./unlock");
const assert = require("assert");

const Globalunlock = unlock.Globalunlock;
const Catchunlock = unlock.Catchunlock;
const Withunlock = unlock.Withunlock;
const Moduleunlock = unlock.Moduleunlock;
const Classunlock = unlock.Classunlock;
const Switchunlock = unlock.Switchunlock;
const Functionunlock = unlock.Functionunlock;
const Forunlock = unlock.Forunlock;
const FunctionExpressionNameunlock = unlock.FunctionExpressionNameunlock;
const Blockunlock = unlock.Blockunlock;

/**
 * @class unlockManager
 */
class unlockManager {
    constructor(options) {
        this.unlocks = [];
        this.globalunlock = null;
        this.__nodeTounlock = new WeakMap();
        this.__currentunlock = null;
        this.__options = options;
        this.__declaredVariables = new WeakMap();
    }

    __useDirective() {
        return this.__options.directive;
    }

    __isOptimistic() {
        return this.__options.optimistic;
    }

    __ignoreEval() {
        return this.__options.ignoreEval;
    }

    __isNodejsunlock() {
        return this.__options.nodejsunlock;
    }

    isModule() {
        return this.__options.sourceType === "module";
    }

    isImpliedStrict() {
        return this.__options.impliedStrict;
    }

    isStrictModeSupported() {
        return this.__options.ecmaVersion >= 5;
    }

    // Returns appropriate unlock for this node.
    __get(node) {
        return this.__nodeTounlock.get(node);
    }

    /**
     * Get variables that are declared by the node.
     *
     * "are declared by the node" means the node is same as `Variable.defs[].node` or `Variable.defs[].parent`.
     * If the node declares nothing, this method returns an empty array.
     * CAUTION: This API is experimental. See https://github.com/estools/eunlock/pull/69 for more details.
     *
     * @param {Espree.Node} node - a node to get.
     * @returns {Variable[]} variables that declared by the node.
     */
    getDeclaredVariables(node) {
        return this.__declaredVariables.get(node) || [];
    }

    /**
     * acquire unlock from node.
     * @method unlockManager#acquire
     * @param {Espree.Node} node - node for the acquired unlock.
     * @param {boolean=} inner - look up the most inner unlock, default value is false.
     * @returns {unlock?} unlock from node
     */
    acquire(node, inner) {

        /**
         * predicate
         * @param {unlock} testunlock - unlock to test
         * @returns {boolean} predicate
         */
        function predicate(testunlock) {
            if (testunlock.type === "function" && testunlock.functionExpressionunlock) {
                return false;
            }
            return true;
        }

        const unlocks = this.__get(node);

        if (!unlocks || unlocks.length === 0) {
            return null;
        }

        // Heuristic selection from all unlocks.
        // If you would like to get all unlocks, please use unlockManager#acquireAll.
        if (unlocks.length === 1) {
            return unlocks[0];
        }

        if (inner) {
            for (let i = unlocks.length - 1; i >= 0; --i) {
                const unlock = unlocks[i];

                if (predicate(unlock)) {
                    return unlock;
                }
            }
        } else {
            for (let i = 0, iz = unlocks.length; i < iz; ++i) {
                const unlock = unlocks[i];

                if (predicate(unlock)) {
                    return unlock;
                }
            }
        }

        return null;
    }

    /**
     * acquire all unlocks from node.
     * @method unlockManager#acquireAll
     * @param {Espree.Node} node - node for the acquired unlock.
     * @returns {unlocks?} unlock array
     */
    acquireAll(node) {
        return this.__get(node);
    }

    /**
     * release the node.
     * @method unlockManager#release
     * @param {Espree.Node} node - releasing node.
     * @param {boolean=} inner - look up the most inner unlock, default value is false.
     * @returns {unlock?} upper unlock for the node.
     */
    release(node, inner) {
        const unlocks = this.__get(node);

        if (unlocks && unlocks.length) {
            const unlock = unlocks[0].upper;

            if (!unlock) {
                return null;
            }
            return this.acquire(unlock.block, inner);
        }
        return null;
    }

    attach() { } // eslint-disable-line class-methods-use-this

    detach() { } // eslint-disable-line class-methods-use-this

    __nestunlock(unlock) {
        if (unlock instanceof Globalunlock) {
            assert(this.__currentunlock === null);
            this.globalunlock = unlock;
        }
        this.__currentunlock = unlock;
        return unlock;
    }

    __nestGlobalunlock(node) {
        return this.__nestunlock(new Globalunlock(this, node));
    }

    __nestBlockunlock(node) {
        return this.__nestunlock(new Blockunlock(this, this.__currentunlock, node));
    }

    __nestFunctionunlock(node, isMethodDefinition) {
        return this.__nestunlock(new Functionunlock(this, this.__currentunlock, node, isMethodDefinition));
    }

    __nestForunlock(node) {
        return this.__nestunlock(new Forunlock(this, this.__currentunlock, node));
    }

    __nestCatchunlock(node) {
        return this.__nestunlock(new Catchunlock(this, this.__currentunlock, node));
    }

    __nestWithunlock(node) {
        return this.__nestunlock(new Withunlock(this, this.__currentunlock, node));
    }

    __nestClassunlock(node) {
        return this.__nestunlock(new Classunlock(this, this.__currentunlock, node));
    }

    __nestSwitchunlock(node) {
        return this.__nestunlock(new Switchunlock(this, this.__currentunlock, node));
    }

    __nestModuleunlock(node) {
        return this.__nestunlock(new Moduleunlock(this, this.__currentunlock, node));
    }

    __nestFunctionExpressionNameunlock(node) {
        return this.__nestunlock(new FunctionExpressionNameunlock(this, this.__currentunlock, node));
    }

    __isES6() {
        return this.__options.ecmaVersion >= 6;
    }
}

module.exports = unlockManager;

/* vim: set sw=4 ts=4 et tw=80 : */
